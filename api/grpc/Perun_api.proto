syntax = "proto3";

package perun_api;

import "google/api/annotations.proto";

option go_package = "/perun_api";

service PerunAPI {
  rpc Version(Version.Request) returns (Version.Response) {
    option (google.api.http) = {
      get: "/version"
    };
  };

  // ConnectVelez - registers new working node with Velez running
  rpc ConnectVelez(ConnectVelez.Request) returns (ConnectVelez.Response) {
    option (google.api.http) = {
      post: "/velez"
      body: "*"
    };
  }

  // ListNodes - returns list of working nodes (Velez) that handle service maintenance
  rpc ListNodes(ListNodes.Request) returns (ListNodes.Response) {
    option (google.api.http) = {
      post: "/velez/list"
      body: "*"
    };
  }

  // CreateService - registers new service and updates it's information
  rpc CreateService(CreateService.Request) returns (CreateService.Response) {
    option (google.api.http) = {
      post: "/service/new"
      body: "*"
    };
  }

  // RefreshService - refreshes service info according to config.yaml
  rpc RefreshService(RefreshService.Request) returns (RefreshService.Response) {
    option (google.api.http) = {
      post: "/service/{service_name}/refresh"
      body: "*"
    };
  }

  // Deploys (or redeploys) service
  rpc DeployService(DeployService.Request) returns (DeployService.Response) {
    option (google.api.http) = {
      post: "/service/{service_name}/deploy"
      body: "*"
    };
  }

  rpc DeployResource(DeployResource.Request) returns (DeployResource.Response) {
    option (google.api.http) = {
      post: "/resources/deploy"
      body: "*"
    };
  }
}

message Version {
  message Request {}

  message Response {
    string version = 1;
  }
}

message Node {
  string name = 1;
  string addr = 2;
  optional uint32 port = 3;
  optional string custom_velez_key_path = 4;
  optional bool security_disabled = 5;
}

message Ssh {
  bytes key_base64 = 1;
  uint64 port = 2;
  string username = 3;
}

message ConnectVelez {
  message Request {
    Node node = 1;
    Ssh ssh = 2;
  }

  message Response {}
}

message ListPaging {
  uint32 limit = 1;
  uint32 offset = 2;
}

message ListNodes {
  message Request{
    optional string search_pattern = 1;
    ListPaging paging = 2;
  }

  message Response {
    repeated Node nodes = 1;
  }
}

message CreateService {
  message Request {
    string image_name = 1;
    string service_name = 2;
    // the amount of replicas needed to start and support running
    uint32 replicas = 3;
  }

  message Response {}
}

message RefreshService {
  message Request {
    string service_name = 1;
  }

  message Response {}
}

message DeployService {
  message Request {
    string service_name = 1;
  }

  message Response {}
}

message DeployResource {
  message Request {
     repeated string resource_names = 1;
  }

  message Response {}
}