// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grpc/Perun_api.proto

package perun_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Version) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VersionMultiError, or nil if none found.
func (m *Version) ValidateAll() error {
	return m.validate(true)
}

func (m *Version) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionMultiError(errors)
	}

	return nil
}

// VersionMultiError is an error wrapping multiple validation errors returned
// by Version.ValidateAll() if the designated constraints aren't met.
type VersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionMultiError) AllErrors() []error { return m }

// VersionValidationError is the validation error returned by Version.Validate
// if the designated constraints aren't met.
type VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionValidationError) ErrorName() string { return "VersionValidationError" }

// Error satisfies the builtin error interface
func (e VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Addr

	if m.Port != nil {
		// no validation rules for Port
	}

	if m.CustomVelezKeyPath != nil {
		// no validation rules for CustomVelezKeyPath
	}

	if m.SecurityDisabled != nil {
		// no validation rules for SecurityDisabled
	}

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on Ssh with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ssh) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ssh with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SshMultiError, or nil if none found.
func (m *Ssh) ValidateAll() error {
	return m.validate(true)
}

func (m *Ssh) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyBase64

	// no validation rules for Port

	// no validation rules for Username

	if len(errors) > 0 {
		return SshMultiError(errors)
	}

	return nil
}

// SshMultiError is an error wrapping multiple validation errors returned by
// Ssh.ValidateAll() if the designated constraints aren't met.
type SshMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SshMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SshMultiError) AllErrors() []error { return m }

// SshValidationError is the validation error returned by Ssh.Validate if the
// designated constraints aren't met.
type SshValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SshValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SshValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SshValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SshValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SshValidationError) ErrorName() string { return "SshValidationError" }

// Error satisfies the builtin error interface
func (e SshValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSsh.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SshValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SshValidationError{}

// Validate checks the field values on ConnectVelez with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectVelez) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectVelez with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectVelezMultiError, or
// nil if none found.
func (m *ConnectVelez) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectVelez) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectVelezMultiError(errors)
	}

	return nil
}

// ConnectVelezMultiError is an error wrapping multiple validation errors
// returned by ConnectVelez.ValidateAll() if the designated constraints aren't met.
type ConnectVelezMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectVelezMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectVelezMultiError) AllErrors() []error { return m }

// ConnectVelezValidationError is the validation error returned by
// ConnectVelez.Validate if the designated constraints aren't met.
type ConnectVelezValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectVelezValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectVelezValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectVelezValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectVelezValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectVelezValidationError) ErrorName() string { return "ConnectVelezValidationError" }

// Error satisfies the builtin error interface
func (e ConnectVelezValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectVelez.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectVelezValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectVelezValidationError{}

// Validate checks the field values on ListPaging with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPaging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaging with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPagingMultiError, or
// nil if none found.
func (m *ListPaging) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListPagingMultiError(errors)
	}

	return nil
}

// ListPagingMultiError is an error wrapping multiple validation errors
// returned by ListPaging.ValidateAll() if the designated constraints aren't met.
type ListPagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPagingMultiError) AllErrors() []error { return m }

// ListPagingValidationError is the validation error returned by
// ListPaging.Validate if the designated constraints aren't met.
type ListPagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPagingValidationError) ErrorName() string { return "ListPagingValidationError" }

// Error satisfies the builtin error interface
func (e ListPagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPagingValidationError{}

// Validate checks the field values on ListNodes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListNodes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListNodesMultiError, or nil
// if none found.
func (m *ListNodes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNodesMultiError(errors)
	}

	return nil
}

// ListNodesMultiError is an error wrapping multiple validation errors returned
// by ListNodes.ValidateAll() if the designated constraints aren't met.
type ListNodesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodesMultiError) AllErrors() []error { return m }

// ListNodesValidationError is the validation error returned by
// ListNodes.Validate if the designated constraints aren't met.
type ListNodesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesValidationError) ErrorName() string { return "ListNodesValidationError" }

// Error satisfies the builtin error interface
func (e ListNodesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesValidationError{}

// Validate checks the field values on CreateService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateServiceMultiError, or
// nil if none found.
func (m *CreateService) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateServiceMultiError(errors)
	}

	return nil
}

// CreateServiceMultiError is an error wrapping multiple validation errors
// returned by CreateService.ValidateAll() if the designated constraints
// aren't met.
type CreateServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceMultiError) AllErrors() []error { return m }

// CreateServiceValidationError is the validation error returned by
// CreateService.Validate if the designated constraints aren't met.
type CreateServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceValidationError) ErrorName() string { return "CreateServiceValidationError" }

// Error satisfies the builtin error interface
func (e CreateServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceValidationError{}

// Validate checks the field values on RefreshService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefreshServiceMultiError,
// or nil if none found.
func (m *RefreshService) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefreshServiceMultiError(errors)
	}

	return nil
}

// RefreshServiceMultiError is an error wrapping multiple validation errors
// returned by RefreshService.ValidateAll() if the designated constraints
// aren't met.
type RefreshServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshServiceMultiError) AllErrors() []error { return m }

// RefreshServiceValidationError is the validation error returned by
// RefreshService.Validate if the designated constraints aren't met.
type RefreshServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshServiceValidationError) ErrorName() string { return "RefreshServiceValidationError" }

// Error satisfies the builtin error interface
func (e RefreshServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshServiceValidationError{}

// Validate checks the field values on DeployService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeployService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeployServiceMultiError, or
// nil if none found.
func (m *DeployService) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeployServiceMultiError(errors)
	}

	return nil
}

// DeployServiceMultiError is an error wrapping multiple validation errors
// returned by DeployService.ValidateAll() if the designated constraints
// aren't met.
type DeployServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployServiceMultiError) AllErrors() []error { return m }

// DeployServiceValidationError is the validation error returned by
// DeployService.Validate if the designated constraints aren't met.
type DeployServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployServiceValidationError) ErrorName() string { return "DeployServiceValidationError" }

// Error satisfies the builtin error interface
func (e DeployServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployServiceValidationError{}

// Validate checks the field values on Version_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_RequestMultiError, or nil if none found.
func (m *Version_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Version_RequestMultiError(errors)
	}

	return nil
}

// Version_RequestMultiError is an error wrapping multiple validation errors
// returned by Version_Request.ValidateAll() if the designated constraints
// aren't met.
type Version_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_RequestMultiError) AllErrors() []error { return m }

// Version_RequestValidationError is the validation error returned by
// Version_Request.Validate if the designated constraints aren't met.
type Version_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_RequestValidationError) ErrorName() string { return "Version_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Version_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_RequestValidationError{}

// Validate checks the field values on Version_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_ResponseMultiError, or nil if none found.
func (m *Version_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return Version_ResponseMultiError(errors)
	}

	return nil
}

// Version_ResponseMultiError is an error wrapping multiple validation errors
// returned by Version_Response.ValidateAll() if the designated constraints
// aren't met.
type Version_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_ResponseMultiError) AllErrors() []error { return m }

// Version_ResponseValidationError is the validation error returned by
// Version_Response.Validate if the designated constraints aren't met.
type Version_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_ResponseValidationError) ErrorName() string { return "Version_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Version_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_ResponseValidationError{}

// Validate checks the field values on ConnectVelez_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectVelez_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectVelez_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectVelez_RequestMultiError, or nil if none found.
func (m *ConnectVelez_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectVelez_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectVelez_RequestValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectVelez_RequestValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectVelez_RequestValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSsh()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectVelez_RequestValidationError{
					field:  "Ssh",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectVelez_RequestValidationError{
					field:  "Ssh",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSsh()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectVelez_RequestValidationError{
				field:  "Ssh",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConnectVelez_RequestMultiError(errors)
	}

	return nil
}

// ConnectVelez_RequestMultiError is an error wrapping multiple validation
// errors returned by ConnectVelez_Request.ValidateAll() if the designated
// constraints aren't met.
type ConnectVelez_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectVelez_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectVelez_RequestMultiError) AllErrors() []error { return m }

// ConnectVelez_RequestValidationError is the validation error returned by
// ConnectVelez_Request.Validate if the designated constraints aren't met.
type ConnectVelez_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectVelez_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectVelez_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectVelez_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectVelez_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectVelez_RequestValidationError) ErrorName() string {
	return "ConnectVelez_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectVelez_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectVelez_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectVelez_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectVelez_RequestValidationError{}

// Validate checks the field values on ConnectVelez_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectVelez_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectVelez_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectVelez_ResponseMultiError, or nil if none found.
func (m *ConnectVelez_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectVelez_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectVelez_ResponseMultiError(errors)
	}

	return nil
}

// ConnectVelez_ResponseMultiError is an error wrapping multiple validation
// errors returned by ConnectVelez_Response.ValidateAll() if the designated
// constraints aren't met.
type ConnectVelez_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectVelez_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectVelez_ResponseMultiError) AllErrors() []error { return m }

// ConnectVelez_ResponseValidationError is the validation error returned by
// ConnectVelez_Response.Validate if the designated constraints aren't met.
type ConnectVelez_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectVelez_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectVelez_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectVelez_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectVelez_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectVelez_ResponseValidationError) ErrorName() string {
	return "ConnectVelez_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectVelez_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectVelez_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectVelez_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectVelez_ResponseValidationError{}

// Validate checks the field values on ListNodes_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodes_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodes_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodes_RequestMultiError, or nil if none found.
func (m *ListNodes_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodes_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNodes_RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNodes_RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNodes_RequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SearchPattern != nil {
		// no validation rules for SearchPattern
	}

	if len(errors) > 0 {
		return ListNodes_RequestMultiError(errors)
	}

	return nil
}

// ListNodes_RequestMultiError is an error wrapping multiple validation errors
// returned by ListNodes_Request.ValidateAll() if the designated constraints
// aren't met.
type ListNodes_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodes_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodes_RequestMultiError) AllErrors() []error { return m }

// ListNodes_RequestValidationError is the validation error returned by
// ListNodes_Request.Validate if the designated constraints aren't met.
type ListNodes_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodes_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodes_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodes_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodes_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodes_RequestValidationError) ErrorName() string {
	return "ListNodes_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodes_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodes_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodes_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodes_RequestValidationError{}

// Validate checks the field values on ListNodes_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNodes_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodes_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodes_ResponseMultiError, or nil if none found.
func (m *ListNodes_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodes_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodes_ResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodes_ResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodes_ResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNodes_ResponseMultiError(errors)
	}

	return nil
}

// ListNodes_ResponseMultiError is an error wrapping multiple validation errors
// returned by ListNodes_Response.ValidateAll() if the designated constraints
// aren't met.
type ListNodes_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodes_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodes_ResponseMultiError) AllErrors() []error { return m }

// ListNodes_ResponseValidationError is the validation error returned by
// ListNodes_Response.Validate if the designated constraints aren't met.
type ListNodes_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodes_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodes_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodes_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodes_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodes_ResponseValidationError) ErrorName() string {
	return "ListNodes_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodes_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodes_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodes_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodes_ResponseValidationError{}

// Validate checks the field values on CreateService_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateService_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateService_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateService_RequestMultiError, or nil if none found.
func (m *CreateService_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateService_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageName

	// no validation rules for ServiceName

	// no validation rules for Replicas

	if len(errors) > 0 {
		return CreateService_RequestMultiError(errors)
	}

	return nil
}

// CreateService_RequestMultiError is an error wrapping multiple validation
// errors returned by CreateService_Request.ValidateAll() if the designated
// constraints aren't met.
type CreateService_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateService_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateService_RequestMultiError) AllErrors() []error { return m }

// CreateService_RequestValidationError is the validation error returned by
// CreateService_Request.Validate if the designated constraints aren't met.
type CreateService_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateService_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateService_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateService_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateService_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateService_RequestValidationError) ErrorName() string {
	return "CreateService_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateService_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateService_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateService_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateService_RequestValidationError{}

// Validate checks the field values on CreateService_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateService_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateService_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateService_ResponseMultiError, or nil if none found.
func (m *CreateService_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateService_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateService_ResponseMultiError(errors)
	}

	return nil
}

// CreateService_ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateService_Response.ValidateAll() if the designated
// constraints aren't met.
type CreateService_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateService_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateService_ResponseMultiError) AllErrors() []error { return m }

// CreateService_ResponseValidationError is the validation error returned by
// CreateService_Response.Validate if the designated constraints aren't met.
type CreateService_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateService_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateService_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateService_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateService_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateService_ResponseValidationError) ErrorName() string {
	return "CreateService_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateService_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateService_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateService_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateService_ResponseValidationError{}

// Validate checks the field values on RefreshService_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshService_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshService_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshService_RequestMultiError, or nil if none found.
func (m *RefreshService_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshService_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return RefreshService_RequestMultiError(errors)
	}

	return nil
}

// RefreshService_RequestMultiError is an error wrapping multiple validation
// errors returned by RefreshService_Request.ValidateAll() if the designated
// constraints aren't met.
type RefreshService_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshService_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshService_RequestMultiError) AllErrors() []error { return m }

// RefreshService_RequestValidationError is the validation error returned by
// RefreshService_Request.Validate if the designated constraints aren't met.
type RefreshService_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshService_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshService_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshService_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshService_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshService_RequestValidationError) ErrorName() string {
	return "RefreshService_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshService_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshService_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshService_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshService_RequestValidationError{}

// Validate checks the field values on RefreshService_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshService_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshService_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshService_ResponseMultiError, or nil if none found.
func (m *RefreshService_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshService_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefreshService_ResponseMultiError(errors)
	}

	return nil
}

// RefreshService_ResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshService_Response.ValidateAll() if the designated
// constraints aren't met.
type RefreshService_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshService_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshService_ResponseMultiError) AllErrors() []error { return m }

// RefreshService_ResponseValidationError is the validation error returned by
// RefreshService_Response.Validate if the designated constraints aren't met.
type RefreshService_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshService_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshService_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshService_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshService_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshService_ResponseValidationError) ErrorName() string {
	return "RefreshService_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshService_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshService_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshService_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshService_ResponseValidationError{}

// Validate checks the field values on DeployService_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployService_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployService_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployService_RequestMultiError, or nil if none found.
func (m *DeployService_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployService_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return DeployService_RequestMultiError(errors)
	}

	return nil
}

// DeployService_RequestMultiError is an error wrapping multiple validation
// errors returned by DeployService_Request.ValidateAll() if the designated
// constraints aren't met.
type DeployService_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployService_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployService_RequestMultiError) AllErrors() []error { return m }

// DeployService_RequestValidationError is the validation error returned by
// DeployService_Request.Validate if the designated constraints aren't met.
type DeployService_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployService_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployService_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployService_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployService_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployService_RequestValidationError) ErrorName() string {
	return "DeployService_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployService_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployService_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployService_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployService_RequestValidationError{}

// Validate checks the field values on DeployService_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployService_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployService_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployService_ResponseMultiError, or nil if none found.
func (m *DeployService_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployService_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeployService_ResponseMultiError(errors)
	}

	return nil
}

// DeployService_ResponseMultiError is an error wrapping multiple validation
// errors returned by DeployService_Response.ValidateAll() if the designated
// constraints aren't met.
type DeployService_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployService_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployService_ResponseMultiError) AllErrors() []error { return m }

// DeployService_ResponseValidationError is the validation error returned by
// DeployService_Response.Validate if the designated constraints aren't met.
type DeployService_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployService_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployService_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployService_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployService_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployService_ResponseValidationError) ErrorName() string {
	return "DeployService_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployService_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployService_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployService_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployService_ResponseValidationError{}
